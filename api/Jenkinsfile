pipeline {
    agent none
    options {
        disableResume()
    }
    stages {
        stage('Build') {
            parallel {
                stage('Build API') {
                    agent { label 'build' }
                    steps {
                        sh 'printenv'
                        script {
                            echo "API Build Pipeline"
                            def filesInThisCommitAsString = sh(script:"git diff --name-only HEAD~1..HEAD | grep -E '^api/|^/api/|^app/|^/app/' || echo -n ''", returnStatus: false, returnStdout: true).trim()
                            def hasChangesInPath = (filesInThisCommitAsString.length() > 0)
                            echo "${filesInThisCommitAsString}"
                            if (!currentBuild.rawBuild.getCauses()[0].toString().contains('UserIdCause') && !hasChangesInPath){
                                currentBuild.rawBuild.delete()
                                error("No changes detected in the path ('^api/')")
                            }
                        }
                        echo "Aborting all running jobs ..."
                        script {
                            abortAllPreviousBuildInProgress(currentBuild)
                        }
                        echo "Building ..."
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run build -- --pr=${CHANGE_ID}"
                        /*sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run build-tools --pr=${CHANGE_ID}"*/
                    }

                }
                stage('Build APP') {
                    agent { label 'build' }
                    steps {
                        script {
                            echo "App Build Pipeline"
                            def filesInThisCommitAsString = sh(script:"git diff --name-only HEAD~1..HEAD | grep -E '^/app/|^app/|^api/|^/api/' || echo -n ''", returnStatus: false, returnStdout: true).trim()
                            def hasChangesInPath = (filesInThisCommitAsString.length() > 0)
                            if (!currentBuild.rawBuild.getCauses()[0].toString().contains('UserIdCause') && !hasChangesInPath){
                                currentBuild.rawBuild.delete()
                                error("No changes detected in the path ('^app/')")
                            }
                        }
                        echo "Aborting all running jobs ..."
                        script {
                            abortAllPreviousBuildInProgress(currentBuild)
                        }
                        echo "Building ..."
                        sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run build -- --pr=${CHANGE_ID}"
                    }
                }
            }
        }
        stage('Pre Deploy (Dev)') {
            agent { label 'deploy' }
            steps {
                echo "Deploying Postgress DB"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run pre-deploy -- --pr=${CHANGE_ID} --env=dev"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run setup -- --pr=${CHANGE_ID} --env=dev"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run seed -- --pr=${CHANGE_ID} --env=dev"
            }
        }
        stage('Test API (Dev)') {
            agent { label 'deploy' }
            steps {
                echo "Testing app"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run test -- --pr=${CHANGE_ID} --env=dev"
            }
        }
        stage('Deploy (DEV/PR ENV) API and App') {
            agent { label 'deploy' }
            when {
                expression {
                    return env.CHANGE_TARGET != 'dev' && env.CHANGE_TARGET != 'staging' && env.CHANGE_TARGET != 'prod';
                }
            }
            steps {
                echo "Deploying API for ${CHANGE_ID}..."
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=dev"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-tools -- --pr=${CHANGE_ID} --env=dev"
                echo "Deploying APP for ${CHANGE_ID}..."
                sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=dev"
            }
        }
        stage('Deploy to Dev/Test') {
            // This stage will deploy to dev enviroment 
            agent {
                label 'deploy'
            }
            when {
                environment name : 'CHANGE_TARGET', value: 'dev'
            }
            steps {
                script {
                    def IS_DEV_APPROVED = input(message: "Deploy to Dev/Test?", ok: "yes", parameters: [string(name: 'IS_APPROVED', defaultValue: 'yes', description: 'Deploy to Dev/Test?')])
                    if (IS_DEV_APPROVED != 'yes') {
                        echo "Dev Deployment is not approved"
                    }
                    echo "Build/Deploy to Dev/Test"
                }
            }
        }
        stage('Buid For Dev/Test') {
            when {
                expression { return IS_DEV_APPROVED == 'yes'}
            }
            parallel {
                stage('Build Dev/Test API') {
                    agent { label 'build' }
                    steps {
                        echo "Build API image from [dev] branch"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run build -- --pr=${CHANGE_ID} --branch=dev"
                    }

                }
                stage('Build Dev/Test APP') {
                    agent { label 'build' }
                    steps {
                        echo "Build APP image from [dev] branch"
                        sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run build -- --pr=${CHANGE_ID} --branch=dev"
                    }
                }
            }
        }
        stage('Deploy Dev') {
            agent {
                label 'deploy'
            }
            when {
                expression { return IS_DEV_APPROVED == 'yes'}
            }
            steps {
                // Postgress 
                echo "Deploying Postgress [STATIC/DEV]"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run pre-deploy -- --pr=${CHANGE_ID} --env=dev --type=static"
                // Backup
                echo "Deploying backup app [STATIC]"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-db-backup -- --pr=${CHANGE_ID} --env=dev --type=static"
                echo "Running DB Backup Job [STATIC]"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run backup -- --env=dev --backup=true"
                // Migration
                echo "Running DB Migration [STATIC]"
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run setup -- --pr=${CHANGE_ID} --env=dev --type=static --branch=dev"
                echo "Running DB Seed Job [STATIC]"
                // Seed
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run seed -- --pr=${CHANGE_ID} --env=dev --type=static --branch=dev"
                // API
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=dev --type=static --branch=dev"
                // Tools
                echo "Deploying dev tools ..."
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-tools -- --env=dev --type=static"
                // App
                echo "Deploying APP[dev] ..."
                sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=dev --type=static --branch=dev"
            }
        }
        stage('Deploy Test') {
            when {
                expression { return IS_DEV_APPROVED == 'yes'}
            }
            parallel {
                stage('Merging with staging branch'){
                    agent {
                        label 'deploy'
                    }
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'github-account', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                            sh """
                                # Update master with latest changes from develop
                                git checkout staging
                                git fetch
                                git merge --squash origin/dev
                                git commit -m "Merge branch develop into staging"
                                git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/bcgov/lucy-web.git

                                # Update the HEAD on develop to be the same as staging
                                git checkout dev
                                git fetch
                                git merge -s ours -m "Updating develop with staging" origin/master
                                git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/bcgov/lucy-web.git
                            """
                        }
                    }
                }
                stage('Deploy to test env') {
                    agent {
                        label 'deploy'
                    }
                    steps {
                        // Postgress 
                        echo "Deploying Postgress [STATIC/DEV]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run pre-deploy -- --pr=${CHANGE_ID} --env=test --type=static"
                        // Backup
                        echo "Deploying backup app [STATIC]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-db-backup -- --pr=${CHANGE_ID} --env=test --type=static"
                        echo "Running DB Backup Job [STATIC]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run backup -- --env=test --backup=true"
                        // Migration
                        echo "Running DB Migration [STATIC]"
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run setup -- --pr=${CHANGE_ID} --env=test --type=static --branch=dev"
                        echo "Running DB Seed Job [STATIC]"
                        // Seed
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run seed -- --pr=${CHANGE_ID} --env=test --type=static --branch=dev"
                        // API
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=test --type=static --branch=dev"
                        // Tools
                        echo "Deploying dev tools ..."
                        sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-tools -- --env=test --type=static"
                        // App
                        echo "Deploying APP[dev] ..."
                        sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=test --type=static --branch=dev"
                    }
                }
            }
        }
        stage('Deploy (PROD) API/APP') {
            agent { label 'deploy' }
            when {
                environment name : 'CHANGE_TARGET', value: 'prod'
            }
            steps {
                script {
                    def IS_APPROVED = input(message: "Deploy to PROD?", ok: "yes", parameters: [string(name: 'IS_APPROVED', defaultValue: 'yes', description: 'Deploy to PROD?')])
                    if (IS_APPROVED != 'yes') {
                        currentBuild.result = "ABORTED"
                        error "User cancelled"
                    }
                    echo "Deploying Postgress [PROD] ..."
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run pre-deploy -- --pr=${CHANGE_ID} --env=prod --type=static"
                    echo "Deploying backup of app [PROD]"
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-db-backup -- --pr=${CHANGE_ID} --env=prod --type=static"
                    echo "Running DB Backup Job [PROD]"
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run backup -- --env=prod --backup=true"
                    echo "Running DB Migration [PROD]"
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run setup -- --pr=${CHANGE_ID} --env=prod --type=static"
                    echo "Deploying in [PROD] [API]..."
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=prod --type=static"
                    echo "Deploying in [PROD] [APP]..."
                    sh "cd app/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=prod --type=static"
                    echo "Deploying dev tools [PROD] ..."
                    sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy-tools -- --env=prod --type=static"
                } 
            }
            /*input {
                message "Should we continue with deployment to TEST?"
                ok "Yes!"
            }
            steps {
                echo "Deploying ..."
                sh "cd api/.pipeline && ./npmw ci && DEBUG=* ./npmw run deploy -- --pr=${CHANGE_ID} --env=prod"
            }*/
        }
    }
}